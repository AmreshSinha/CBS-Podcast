import styled from "styled-components";
import Head from "next/head";
import axios from "axios";
import Navbar from "../../components/Navbar";
import grainImg from "../../public/grain-dark.png";
import EpisodeCard from "../../components/EpisodeCard";
import { BsFillArrowLeftCircleFill } from "react-icons/bs";
import { useRouter } from "next/router";
import ContextProvider, { GlobalContext } from "../../context";
import { useContext } from "react";
// import { musicUrl } from "../../atoms/atoms";
// import { useRecoilState } from "recoil";

export default function PodCastDetails({ data }) {
  const router = useRouter();
  // const [music, setMusic] = useRecoilState(musicUrl);
  // const [episode, setEpisode] = useContext(GlobalContext)
  // console.log(data.data.attributes.episodes.data)
  const imageUrl = 'http://'+process.env.NEXT_PUBLIC_ENDPOINT+data.data.attributes.imageUrl;

  return (
    <>
      <Head>
        <title>{data.data.attributes.name} - CBS Podcast</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PodcastViewContainer>
        {/* <Navbar /> */}
        <PodcastWrapper>
          <PodcastCard>
            <LeftArrow onClick={() => router.back()}>
              <BsFillArrowLeftCircleFill />
            </LeftArrow>
            <Details>
              <SubDetails>
                <PodcastImage>
                  <img src={imageUrl} />
                </PodcastImage>
                <Desc>
                  <h1>{data.data.attributes.name}</h1>
                  <h2>by {data.data.attributes.author}</h2>
                  <h2>
                    {data.data.attributes.episodes.data.length} episode
                    {data.data.attributes.episodes.data.length > 1 && "s"}
                  </h2>
                </Desc>
              </SubDetails>
              {data.data.attributes.episodes.data.map((episode, index) => (
                <EpisodeCard key={index} episode={episode} index={index} />
              ))}
            </Details>
          </PodcastCard>
        </PodcastWrapper>
      </PodcastViewContainer>
    </>
  );
}

export async function getServerSideProps(ctx) {
  const ENDPOINT = process.env.NEXT_PUBLIC_ENDPOINT || 'localhost:1337';
  const { id } = ctx.query;
  if (id === undefined) {
    return {
      notFound: true,
    };
  }
  const data = await axios
    .get(`http://${ENDPOINT}/api/podcasts/${id}?populate=*`, {
      headers: {
        Authorization: "Bearer " + process.env.STRAPI_SECRET,
      },
    })
    .catch((err) => {
      return { notFound: false };
    });
  if (data === undefined || data.data === undefined || data.data === null) {
    return {
      notFound: true,
    };
  }
  return {
    props: { data: data.data },
  };
}

const PodcastViewContainer = styled.div`
  font-family: "Space Grotesk", sans-serif;
  width: 100%;
  min-height: 100vh;
  background: #100f0f;
  background-image: url(${grainImg.src});
`;

const PodcastWrapper = styled.div`
  width: 100%;
  display: flex;
  justify-content: center;
`;

const PodcastCard = styled.div`
  margin-top: 6rem;
  margin-bottom: 6rem;
  width: 50%;
  min-height: 50vh;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 0 100px 0 rgba(255, 255, 255, 0.2);
  display: flex;
  flex-direction: row;
  gap: 1rem;
  padding: 1rem;
`;

const PodcastImage = styled.div`
  border-radius: 5px;
  width: 70px;
  height: 70px;
  max-width: 70px;
  max-height: 70px;
  background: #100f0f;
  img {
    border-radius: 5px;
    width: inherit;
    height: inherit;
  }
`;

const LeftArrow = styled.div`
  width: 70px;
  height: 70px;
  max-width: 70px;
  max-height: 70px;
  display: flex;
  justify-content: center;
  align-items: center;
  svg {
    font-size: 48px;
    transition: all 0.2s ease-in-out;
    :hover {
      cursor: pointer;
      transform: scale(1.1);
    }
  }
`;

const Details = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  gap: 0.5rem;
  width: 100%;
  h1 {
    font-size: 1.5rem;
    font-weight: 700;
  }
`;

const SubDetails = styled.div`
  display: flex;
  flex-direction: row;
  gap: 0.5rem;
  h1 {
    font-size: 1.5rem;
    font-weight: 700;
  }
`;

const Desc = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
`;
